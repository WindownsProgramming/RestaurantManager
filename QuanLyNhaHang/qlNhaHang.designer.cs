#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace QuanLyNhaHang
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="QLNhaHang")]
	public partial class qlNhaHangDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertBanAn(BanAn instance);
    partial void UpdateBanAn(BanAn instance);
    partial void DeleteBanAn(BanAn instance);
    partial void InsertThanhPhanMonAn(ThanhPhanMonAn instance);
    partial void UpdateThanhPhanMonAn(ThanhPhanMonAn instance);
    partial void DeleteThanhPhanMonAn(ThanhPhanMonAn instance);
    partial void InsertBangLuong(BangLuong instance);
    partial void UpdateBangLuong(BangLuong instance);
    partial void DeleteBangLuong(BangLuong instance);
    partial void InsertBill(Bill instance);
    partial void UpdateBill(Bill instance);
    partial void DeleteBill(Bill instance);
    partial void InsertBillInfo(BillInfo instance);
    partial void UpdateBillInfo(BillInfo instance);
    partial void DeleteBillInfo(BillInfo instance);
    partial void InsertChamCong(ChamCong instance);
    partial void UpdateChamCong(ChamCong instance);
    partial void DeleteChamCong(ChamCong instance);
    partial void InsertCTHoaDon(CTHoaDon instance);
    partial void UpdateCTHoaDon(CTHoaDon instance);
    partial void DeleteCTHoaDon(CTHoaDon instance);
    partial void InsertCTNhapKho(CTNhapKho instance);
    partial void UpdateCTNhapKho(CTNhapKho instance);
    partial void DeleteCTNhapKho(CTNhapKho instance);
    partial void InsertDatBan(DatBan instance);
    partial void UpdateDatBan(DatBan instance);
    partial void DeleteDatBan(DatBan instance);
    partial void InsertHoaDon(HoaDon instance);
    partial void UpdateHoaDon(HoaDon instance);
    partial void DeleteHoaDon(HoaDon instance);
    partial void InsertKhachHang(KhachHang instance);
    partial void UpdateKhachHang(KhachHang instance);
    partial void DeleteKhachHang(KhachHang instance);
    partial void InsertLoaiMonAn(LoaiMonAn instance);
    partial void UpdateLoaiMonAn(LoaiMonAn instance);
    partial void DeleteLoaiMonAn(LoaiMonAn instance);
    partial void InsertLoaiNguyenLieu(LoaiNguyenLieu instance);
    partial void UpdateLoaiNguyenLieu(LoaiNguyenLieu instance);
    partial void DeleteLoaiNguyenLieu(LoaiNguyenLieu instance);
    partial void InsertMonAn(MonAn instance);
    partial void UpdateMonAn(MonAn instance);
    partial void DeleteMonAn(MonAn instance);
    partial void InsertNguyenLieu(NguyenLieu instance);
    partial void UpdateNguyenLieu(NguyenLieu instance);
    partial void DeleteNguyenLieu(NguyenLieu instance);
    partial void InsertNhapKho(NhapKho instance);
    partial void UpdateNhapKho(NhapKho instance);
    partial void DeleteNhapKho(NhapKho instance);
    partial void InsertAccount(Account instance);
    partial void UpdateAccount(Account instance);
    partial void DeleteAccount(Account instance);
    partial void InsertNhanVien(NhanVien instance);
    partial void UpdateNhanVien(NhanVien instance);
    partial void DeleteNhanVien(NhanVien instance);
    partial void InsertCaLam(CaLam instance);
    partial void UpdateCaLam(CaLam instance);
    partial void DeleteCaLam(CaLam instance);
    partial void InsertLoaiNV(LoaiNV instance);
    partial void UpdateLoaiNV(LoaiNV instance);
    partial void DeleteLoaiNV(LoaiNV instance);
    #endregion
		
		public qlNhaHangDataContext() : 
				base(global::QuanLyNhaHang.Properties.Settings.Default.QLNhaHangConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public qlNhaHangDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public qlNhaHangDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public qlNhaHangDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public qlNhaHangDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<BanAn> BanAns
		{
			get
			{
				return this.GetTable<BanAn>();
			}
		}
		
		public System.Data.Linq.Table<ThanhPhanMonAn> ThanhPhanMonAns
		{
			get
			{
				return this.GetTable<ThanhPhanMonAn>();
			}
		}
		
		public System.Data.Linq.Table<BangLuong> BangLuongs
		{
			get
			{
				return this.GetTable<BangLuong>();
			}
		}
		
		public System.Data.Linq.Table<Bill> Bills
		{
			get
			{
				return this.GetTable<Bill>();
			}
		}
		
		public System.Data.Linq.Table<BillInfo> BillInfos
		{
			get
			{
				return this.GetTable<BillInfo>();
			}
		}
		
		public System.Data.Linq.Table<ChamCong> ChamCongs
		{
			get
			{
				return this.GetTable<ChamCong>();
			}
		}
		
		public System.Data.Linq.Table<CTHoaDon> CTHoaDons
		{
			get
			{
				return this.GetTable<CTHoaDon>();
			}
		}
		
		public System.Data.Linq.Table<CTNhapKho> CTNhapKhos
		{
			get
			{
				return this.GetTable<CTNhapKho>();
			}
		}
		
		public System.Data.Linq.Table<DatBan> DatBans
		{
			get
			{
				return this.GetTable<DatBan>();
			}
		}
		
		public System.Data.Linq.Table<HoaDon> HoaDons
		{
			get
			{
				return this.GetTable<HoaDon>();
			}
		}
		
		public System.Data.Linq.Table<KhachHang> KhachHangs
		{
			get
			{
				return this.GetTable<KhachHang>();
			}
		}
		
		public System.Data.Linq.Table<LoaiMonAn> LoaiMonAns
		{
			get
			{
				return this.GetTable<LoaiMonAn>();
			}
		}
		
		public System.Data.Linq.Table<LoaiNguyenLieu> LoaiNguyenLieus
		{
			get
			{
				return this.GetTable<LoaiNguyenLieu>();
			}
		}
		
		public System.Data.Linq.Table<MonAn> MonAns
		{
			get
			{
				return this.GetTable<MonAn>();
			}
		}
		
		public System.Data.Linq.Table<NguyenLieu> NguyenLieus
		{
			get
			{
				return this.GetTable<NguyenLieu>();
			}
		}
		
		public System.Data.Linq.Table<NhapKho> NhapKhos
		{
			get
			{
				return this.GetTable<NhapKho>();
			}
		}
		
		public System.Data.Linq.Table<Account> Accounts
		{
			get
			{
				return this.GetTable<Account>();
			}
		}
		
		public System.Data.Linq.Table<NhanVien> NhanViens
		{
			get
			{
				return this.GetTable<NhanVien>();
			}
		}
		
		public System.Data.Linq.Table<CaLam> CaLams
		{
			get
			{
				return this.GetTable<CaLam>();
			}
		}
		
		public System.Data.Linq.Table<LoaiNV> LoaiNVs
		{
			get
			{
				return this.GetTable<LoaiNV>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BanAn")]
	public partial class BanAn : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IDBanAn;
		
		private string _TenBanAn;
		
		private System.Nullable<int> _TinhTrangBan;
		
		private EntitySet<Bill> _Bills;
		
		private EntitySet<DatBan> _DatBans;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDBanAnChanging(int value);
    partial void OnIDBanAnChanged();
    partial void OnTenBanAnChanging(string value);
    partial void OnTenBanAnChanged();
    partial void OnTinhTrangBanChanging(System.Nullable<int> value);
    partial void OnTinhTrangBanChanged();
    #endregion
		
		public BanAn()
		{
			this._Bills = new EntitySet<Bill>(new Action<Bill>(this.attach_Bills), new Action<Bill>(this.detach_Bills));
			this._DatBans = new EntitySet<DatBan>(new Action<DatBan>(this.attach_DatBans), new Action<DatBan>(this.detach_DatBans));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDBanAn", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IDBanAn
		{
			get
			{
				return this._IDBanAn;
			}
			set
			{
				if ((this._IDBanAn != value))
				{
					this.OnIDBanAnChanging(value);
					this.SendPropertyChanging();
					this._IDBanAn = value;
					this.SendPropertyChanged("IDBanAn");
					this.OnIDBanAnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TenBanAn", DbType="NVarChar(30)")]
		public string TenBanAn
		{
			get
			{
				return this._TenBanAn;
			}
			set
			{
				if ((this._TenBanAn != value))
				{
					this.OnTenBanAnChanging(value);
					this.SendPropertyChanging();
					this._TenBanAn = value;
					this.SendPropertyChanged("TenBanAn");
					this.OnTenBanAnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TinhTrangBan", DbType="Int")]
		public System.Nullable<int> TinhTrangBan
		{
			get
			{
				return this._TinhTrangBan;
			}
			set
			{
				if ((this._TinhTrangBan != value))
				{
					this.OnTinhTrangBanChanging(value);
					this.SendPropertyChanging();
					this._TinhTrangBan = value;
					this.SendPropertyChanged("TinhTrangBan");
					this.OnTinhTrangBanChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BanAn_Bill", Storage="_Bills", ThisKey="IDBanAn", OtherKey="IDBanAn")]
		public EntitySet<Bill> Bills
		{
			get
			{
				return this._Bills;
			}
			set
			{
				this._Bills.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BanAn_DatBan", Storage="_DatBans", ThisKey="IDBanAn", OtherKey="IDBanAn")]
		public EntitySet<DatBan> DatBans
		{
			get
			{
				return this._DatBans;
			}
			set
			{
				this._DatBans.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Bills(Bill entity)
		{
			this.SendPropertyChanging();
			entity.BanAn = this;
		}
		
		private void detach_Bills(Bill entity)
		{
			this.SendPropertyChanging();
			entity.BanAn = null;
		}
		
		private void attach_DatBans(DatBan entity)
		{
			this.SendPropertyChanging();
			entity.BanAn = this;
		}
		
		private void detach_DatBans(DatBan entity)
		{
			this.SendPropertyChanging();
			entity.BanAn = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ThanhPhanMonAn")]
	public partial class ThanhPhanMonAn : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IDMonAn;
		
		private int _IDNguyenLieu;
		
		private System.Nullable<double> _SoLuongNL;
		
		private EntityRef<MonAn> _MonAn;
		
		private EntityRef<NguyenLieu> _NguyenLieu;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDMonAnChanging(int value);
    partial void OnIDMonAnChanged();
    partial void OnIDNguyenLieuChanging(int value);
    partial void OnIDNguyenLieuChanged();
    partial void OnSoLuongNLChanging(System.Nullable<double> value);
    partial void OnSoLuongNLChanged();
    #endregion
		
		public ThanhPhanMonAn()
		{
			this._MonAn = default(EntityRef<MonAn>);
			this._NguyenLieu = default(EntityRef<NguyenLieu>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDMonAn", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int IDMonAn
		{
			get
			{
				return this._IDMonAn;
			}
			set
			{
				if ((this._IDMonAn != value))
				{
					if (this._MonAn.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDMonAnChanging(value);
					this.SendPropertyChanging();
					this._IDMonAn = value;
					this.SendPropertyChanged("IDMonAn");
					this.OnIDMonAnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDNguyenLieu", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int IDNguyenLieu
		{
			get
			{
				return this._IDNguyenLieu;
			}
			set
			{
				if ((this._IDNguyenLieu != value))
				{
					if (this._NguyenLieu.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDNguyenLieuChanging(value);
					this.SendPropertyChanging();
					this._IDNguyenLieu = value;
					this.SendPropertyChanged("IDNguyenLieu");
					this.OnIDNguyenLieuChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SoLuongNL", DbType="Float")]
		public System.Nullable<double> SoLuongNL
		{
			get
			{
				return this._SoLuongNL;
			}
			set
			{
				if ((this._SoLuongNL != value))
				{
					this.OnSoLuongNLChanging(value);
					this.SendPropertyChanging();
					this._SoLuongNL = value;
					this.SendPropertyChanged("SoLuongNL");
					this.OnSoLuongNLChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MonAn_ThanhPhanMonAn", Storage="_MonAn", ThisKey="IDMonAn", OtherKey="IDMonAn", IsForeignKey=true)]
		public MonAn MonAn
		{
			get
			{
				return this._MonAn.Entity;
			}
			set
			{
				MonAn previousValue = this._MonAn.Entity;
				if (((previousValue != value) 
							|| (this._MonAn.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MonAn.Entity = null;
						previousValue.ThanhPhanMonAns.Remove(this);
					}
					this._MonAn.Entity = value;
					if ((value != null))
					{
						value.ThanhPhanMonAns.Add(this);
						this._IDMonAn = value.IDMonAn;
					}
					else
					{
						this._IDMonAn = default(int);
					}
					this.SendPropertyChanged("MonAn");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="NguyenLieu_ThanhPhanMonAn", Storage="_NguyenLieu", ThisKey="IDNguyenLieu", OtherKey="IDNguyenLieu", IsForeignKey=true)]
		public NguyenLieu NguyenLieu
		{
			get
			{
				return this._NguyenLieu.Entity;
			}
			set
			{
				NguyenLieu previousValue = this._NguyenLieu.Entity;
				if (((previousValue != value) 
							|| (this._NguyenLieu.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._NguyenLieu.Entity = null;
						previousValue.ThanhPhanMonAns.Remove(this);
					}
					this._NguyenLieu.Entity = value;
					if ((value != null))
					{
						value.ThanhPhanMonAns.Add(this);
						this._IDNguyenLieu = value.IDNguyenLieu;
					}
					else
					{
						this._IDNguyenLieu = default(int);
					}
					this.SendPropertyChanged("NguyenLieu");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BangLuong")]
	public partial class BangLuong : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IDLuong;
		
		private System.Nullable<int> _IDLoaiNV;
		
		private System.Nullable<int> _IDCa;
		
		private System.Nullable<double> _Tien;
		
		private EntityRef<CaLam> _CaLam;
		
		private EntityRef<LoaiNV> _LoaiNV;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDLuongChanging(int value);
    partial void OnIDLuongChanged();
    partial void OnIDLoaiNVChanging(System.Nullable<int> value);
    partial void OnIDLoaiNVChanged();
    partial void OnIDCaChanging(System.Nullable<int> value);
    partial void OnIDCaChanged();
    partial void OnTienChanging(System.Nullable<double> value);
    partial void OnTienChanged();
    #endregion
		
		public BangLuong()
		{
			this._CaLam = default(EntityRef<CaLam>);
			this._LoaiNV = default(EntityRef<LoaiNV>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDLuong", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IDLuong
		{
			get
			{
				return this._IDLuong;
			}
			set
			{
				if ((this._IDLuong != value))
				{
					this.OnIDLuongChanging(value);
					this.SendPropertyChanging();
					this._IDLuong = value;
					this.SendPropertyChanged("IDLuong");
					this.OnIDLuongChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDLoaiNV", DbType="Int")]
		public System.Nullable<int> IDLoaiNV
		{
			get
			{
				return this._IDLoaiNV;
			}
			set
			{
				if ((this._IDLoaiNV != value))
				{
					if (this._LoaiNV.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDLoaiNVChanging(value);
					this.SendPropertyChanging();
					this._IDLoaiNV = value;
					this.SendPropertyChanged("IDLoaiNV");
					this.OnIDLoaiNVChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDCa", DbType="Int")]
		public System.Nullable<int> IDCa
		{
			get
			{
				return this._IDCa;
			}
			set
			{
				if ((this._IDCa != value))
				{
					if (this._CaLam.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDCaChanging(value);
					this.SendPropertyChanging();
					this._IDCa = value;
					this.SendPropertyChanged("IDCa");
					this.OnIDCaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Tien", DbType="Float")]
		public System.Nullable<double> Tien
		{
			get
			{
				return this._Tien;
			}
			set
			{
				if ((this._Tien != value))
				{
					this.OnTienChanging(value);
					this.SendPropertyChanging();
					this._Tien = value;
					this.SendPropertyChanged("Tien");
					this.OnTienChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CaLam_BangLuong", Storage="_CaLam", ThisKey="IDCa", OtherKey="IDCa", IsForeignKey=true)]
		public CaLam CaLam
		{
			get
			{
				return this._CaLam.Entity;
			}
			set
			{
				CaLam previousValue = this._CaLam.Entity;
				if (((previousValue != value) 
							|| (this._CaLam.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CaLam.Entity = null;
						previousValue.BangLuongs.Remove(this);
					}
					this._CaLam.Entity = value;
					if ((value != null))
					{
						value.BangLuongs.Add(this);
						this._IDCa = value.IDCa;
					}
					else
					{
						this._IDCa = default(Nullable<int>);
					}
					this.SendPropertyChanged("CaLam");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LoaiNV_BangLuong", Storage="_LoaiNV", ThisKey="IDLoaiNV", OtherKey="IDLoaiNV", IsForeignKey=true)]
		public LoaiNV LoaiNV
		{
			get
			{
				return this._LoaiNV.Entity;
			}
			set
			{
				LoaiNV previousValue = this._LoaiNV.Entity;
				if (((previousValue != value) 
							|| (this._LoaiNV.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LoaiNV.Entity = null;
						previousValue.BangLuongs.Remove(this);
					}
					this._LoaiNV.Entity = value;
					if ((value != null))
					{
						value.BangLuongs.Add(this);
						this._IDLoaiNV = value.IDLoaiNV;
					}
					else
					{
						this._IDLoaiNV = default(Nullable<int>);
					}
					this.SendPropertyChanged("LoaiNV");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Bill")]
	public partial class Bill : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IDBill;
		
		private System.Nullable<System.DateTime> _DateCheckIn;
		
		private System.Nullable<System.DateTime> _DateCheckOut;
		
		private System.Nullable<int> _IDBanAn;
		
		private System.Nullable<int> _TrangThai;
		
		private System.Nullable<int> _IDNhanVien;
		
		private System.Nullable<int> _TongTien;
		
		private System.Nullable<int> _GiamGia;
		
		private EntitySet<BillInfo> _BillInfos;
		
		private EntityRef<BanAn> _BanAn;
		
		private EntityRef<NhanVien> _NhanVien;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDBillChanging(int value);
    partial void OnIDBillChanged();
    partial void OnDateCheckInChanging(System.Nullable<System.DateTime> value);
    partial void OnDateCheckInChanged();
    partial void OnDateCheckOutChanging(System.Nullable<System.DateTime> value);
    partial void OnDateCheckOutChanged();
    partial void OnIDBanAnChanging(System.Nullable<int> value);
    partial void OnIDBanAnChanged();
    partial void OnTrangThaiChanging(System.Nullable<int> value);
    partial void OnTrangThaiChanged();
    partial void OnIDNhanVienChanging(System.Nullable<int> value);
    partial void OnIDNhanVienChanged();
    partial void OnTongTienChanging(System.Nullable<int> value);
    partial void OnTongTienChanged();
    partial void OnGiamGiaChanging(System.Nullable<int> value);
    partial void OnGiamGiaChanged();
    #endregion
		
		public Bill()
		{
			this._BillInfos = new EntitySet<BillInfo>(new Action<BillInfo>(this.attach_BillInfos), new Action<BillInfo>(this.detach_BillInfos));
			this._BanAn = default(EntityRef<BanAn>);
			this._NhanVien = default(EntityRef<NhanVien>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDBill", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IDBill
		{
			get
			{
				return this._IDBill;
			}
			set
			{
				if ((this._IDBill != value))
				{
					this.OnIDBillChanging(value);
					this.SendPropertyChanging();
					this._IDBill = value;
					this.SendPropertyChanged("IDBill");
					this.OnIDBillChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCheckIn", DbType="Date")]
		public System.Nullable<System.DateTime> DateCheckIn
		{
			get
			{
				return this._DateCheckIn;
			}
			set
			{
				if ((this._DateCheckIn != value))
				{
					this.OnDateCheckInChanging(value);
					this.SendPropertyChanging();
					this._DateCheckIn = value;
					this.SendPropertyChanged("DateCheckIn");
					this.OnDateCheckInChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCheckOut", DbType="Date")]
		public System.Nullable<System.DateTime> DateCheckOut
		{
			get
			{
				return this._DateCheckOut;
			}
			set
			{
				if ((this._DateCheckOut != value))
				{
					this.OnDateCheckOutChanging(value);
					this.SendPropertyChanging();
					this._DateCheckOut = value;
					this.SendPropertyChanged("DateCheckOut");
					this.OnDateCheckOutChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDBanAn", DbType="Int")]
		public System.Nullable<int> IDBanAn
		{
			get
			{
				return this._IDBanAn;
			}
			set
			{
				if ((this._IDBanAn != value))
				{
					if (this._BanAn.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDBanAnChanging(value);
					this.SendPropertyChanging();
					this._IDBanAn = value;
					this.SendPropertyChanged("IDBanAn");
					this.OnIDBanAnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TrangThai", DbType="Int")]
		public System.Nullable<int> TrangThai
		{
			get
			{
				return this._TrangThai;
			}
			set
			{
				if ((this._TrangThai != value))
				{
					this.OnTrangThaiChanging(value);
					this.SendPropertyChanging();
					this._TrangThai = value;
					this.SendPropertyChanged("TrangThai");
					this.OnTrangThaiChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDNhanVien", DbType="Int")]
		public System.Nullable<int> IDNhanVien
		{
			get
			{
				return this._IDNhanVien;
			}
			set
			{
				if ((this._IDNhanVien != value))
				{
					if (this._NhanVien.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDNhanVienChanging(value);
					this.SendPropertyChanging();
					this._IDNhanVien = value;
					this.SendPropertyChanged("IDNhanVien");
					this.OnIDNhanVienChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TongTien", DbType="Int")]
		public System.Nullable<int> TongTien
		{
			get
			{
				return this._TongTien;
			}
			set
			{
				if ((this._TongTien != value))
				{
					this.OnTongTienChanging(value);
					this.SendPropertyChanging();
					this._TongTien = value;
					this.SendPropertyChanged("TongTien");
					this.OnTongTienChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GiamGia", DbType="Int")]
		public System.Nullable<int> GiamGia
		{
			get
			{
				return this._GiamGia;
			}
			set
			{
				if ((this._GiamGia != value))
				{
					this.OnGiamGiaChanging(value);
					this.SendPropertyChanging();
					this._GiamGia = value;
					this.SendPropertyChanged("GiamGia");
					this.OnGiamGiaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Bill_BillInfo", Storage="_BillInfos", ThisKey="IDBill", OtherKey="IDBill")]
		public EntitySet<BillInfo> BillInfos
		{
			get
			{
				return this._BillInfos;
			}
			set
			{
				this._BillInfos.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BanAn_Bill", Storage="_BanAn", ThisKey="IDBanAn", OtherKey="IDBanAn", IsForeignKey=true)]
		public BanAn BanAn
		{
			get
			{
				return this._BanAn.Entity;
			}
			set
			{
				BanAn previousValue = this._BanAn.Entity;
				if (((previousValue != value) 
							|| (this._BanAn.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BanAn.Entity = null;
						previousValue.Bills.Remove(this);
					}
					this._BanAn.Entity = value;
					if ((value != null))
					{
						value.Bills.Add(this);
						this._IDBanAn = value.IDBanAn;
					}
					else
					{
						this._IDBanAn = default(Nullable<int>);
					}
					this.SendPropertyChanged("BanAn");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="NhanVien_Bill", Storage="_NhanVien", ThisKey="IDNhanVien", OtherKey="IDNhanVien", IsForeignKey=true)]
		public NhanVien NhanVien
		{
			get
			{
				return this._NhanVien.Entity;
			}
			set
			{
				NhanVien previousValue = this._NhanVien.Entity;
				if (((previousValue != value) 
							|| (this._NhanVien.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._NhanVien.Entity = null;
						previousValue.Bills.Remove(this);
					}
					this._NhanVien.Entity = value;
					if ((value != null))
					{
						value.Bills.Add(this);
						this._IDNhanVien = value.IDNhanVien;
					}
					else
					{
						this._IDNhanVien = default(Nullable<int>);
					}
					this.SendPropertyChanged("NhanVien");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BillInfos(BillInfo entity)
		{
			this.SendPropertyChanging();
			entity.Bill = this;
		}
		
		private void detach_BillInfos(BillInfo entity)
		{
			this.SendPropertyChanging();
			entity.Bill = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BillInfo")]
	public partial class BillInfo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IDBillInfo;
		
		private System.Nullable<int> _IDBill;
		
		private System.Nullable<int> _IDMonAn;
		
		private System.Nullable<int> _SoLuong;
		
		private EntityRef<Bill> _Bill;
		
		private EntityRef<MonAn> _MonAn;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDBillInfoChanging(int value);
    partial void OnIDBillInfoChanged();
    partial void OnIDBillChanging(System.Nullable<int> value);
    partial void OnIDBillChanged();
    partial void OnIDMonAnChanging(System.Nullable<int> value);
    partial void OnIDMonAnChanged();
    partial void OnSoLuongChanging(System.Nullable<int> value);
    partial void OnSoLuongChanged();
    #endregion
		
		public BillInfo()
		{
			this._Bill = default(EntityRef<Bill>);
			this._MonAn = default(EntityRef<MonAn>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDBillInfo", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IDBillInfo
		{
			get
			{
				return this._IDBillInfo;
			}
			set
			{
				if ((this._IDBillInfo != value))
				{
					this.OnIDBillInfoChanging(value);
					this.SendPropertyChanging();
					this._IDBillInfo = value;
					this.SendPropertyChanged("IDBillInfo");
					this.OnIDBillInfoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDBill", DbType="Int")]
		public System.Nullable<int> IDBill
		{
			get
			{
				return this._IDBill;
			}
			set
			{
				if ((this._IDBill != value))
				{
					if (this._Bill.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDBillChanging(value);
					this.SendPropertyChanging();
					this._IDBill = value;
					this.SendPropertyChanged("IDBill");
					this.OnIDBillChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDMonAn", DbType="Int")]
		public System.Nullable<int> IDMonAn
		{
			get
			{
				return this._IDMonAn;
			}
			set
			{
				if ((this._IDMonAn != value))
				{
					if (this._MonAn.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDMonAnChanging(value);
					this.SendPropertyChanging();
					this._IDMonAn = value;
					this.SendPropertyChanged("IDMonAn");
					this.OnIDMonAnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SoLuong", DbType="Int")]
		public System.Nullable<int> SoLuong
		{
			get
			{
				return this._SoLuong;
			}
			set
			{
				if ((this._SoLuong != value))
				{
					this.OnSoLuongChanging(value);
					this.SendPropertyChanging();
					this._SoLuong = value;
					this.SendPropertyChanged("SoLuong");
					this.OnSoLuongChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Bill_BillInfo", Storage="_Bill", ThisKey="IDBill", OtherKey="IDBill", IsForeignKey=true)]
		public Bill Bill
		{
			get
			{
				return this._Bill.Entity;
			}
			set
			{
				Bill previousValue = this._Bill.Entity;
				if (((previousValue != value) 
							|| (this._Bill.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Bill.Entity = null;
						previousValue.BillInfos.Remove(this);
					}
					this._Bill.Entity = value;
					if ((value != null))
					{
						value.BillInfos.Add(this);
						this._IDBill = value.IDBill;
					}
					else
					{
						this._IDBill = default(Nullable<int>);
					}
					this.SendPropertyChanged("Bill");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MonAn_BillInfo", Storage="_MonAn", ThisKey="IDMonAn", OtherKey="IDMonAn", IsForeignKey=true)]
		public MonAn MonAn
		{
			get
			{
				return this._MonAn.Entity;
			}
			set
			{
				MonAn previousValue = this._MonAn.Entity;
				if (((previousValue != value) 
							|| (this._MonAn.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MonAn.Entity = null;
						previousValue.BillInfos.Remove(this);
					}
					this._MonAn.Entity = value;
					if ((value != null))
					{
						value.BillInfos.Add(this);
						this._IDMonAn = value.IDMonAn;
					}
					else
					{
						this._IDMonAn = default(Nullable<int>);
					}
					this.SendPropertyChanged("MonAn");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ChamCong")]
	public partial class ChamCong : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IDChamCong;
		
		private System.Nullable<int> _IDNhanVien;
		
		private System.Nullable<int> _IDCa;
		
		private string _GhiChu;
		
		private System.Nullable<System.DateTime> _NgayLam;
		
		private EntityRef<NhanVien> _NhanVien;
		
		private EntityRef<CaLam> _CaLam;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChamCongChanging(int value);
    partial void OnIDChamCongChanged();
    partial void OnIDNhanVienChanging(System.Nullable<int> value);
    partial void OnIDNhanVienChanged();
    partial void OnIDCaChanging(System.Nullable<int> value);
    partial void OnIDCaChanged();
    partial void OnGhiChuChanging(string value);
    partial void OnGhiChuChanged();
    partial void OnNgayLamChanging(System.Nullable<System.DateTime> value);
    partial void OnNgayLamChanged();
    #endregion
		
		public ChamCong()
		{
			this._NhanVien = default(EntityRef<NhanVien>);
			this._CaLam = default(EntityRef<CaLam>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDChamCong", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IDChamCong
		{
			get
			{
				return this._IDChamCong;
			}
			set
			{
				if ((this._IDChamCong != value))
				{
					this.OnIDChamCongChanging(value);
					this.SendPropertyChanging();
					this._IDChamCong = value;
					this.SendPropertyChanged("IDChamCong");
					this.OnIDChamCongChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDNhanVien", DbType="Int")]
		public System.Nullable<int> IDNhanVien
		{
			get
			{
				return this._IDNhanVien;
			}
			set
			{
				if ((this._IDNhanVien != value))
				{
					if (this._NhanVien.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDNhanVienChanging(value);
					this.SendPropertyChanging();
					this._IDNhanVien = value;
					this.SendPropertyChanged("IDNhanVien");
					this.OnIDNhanVienChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDCa", DbType="Int")]
		public System.Nullable<int> IDCa
		{
			get
			{
				return this._IDCa;
			}
			set
			{
				if ((this._IDCa != value))
				{
					if (this._CaLam.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDCaChanging(value);
					this.SendPropertyChanging();
					this._IDCa = value;
					this.SendPropertyChanged("IDCa");
					this.OnIDCaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GhiChu", DbType="NVarChar(50)")]
		public string GhiChu
		{
			get
			{
				return this._GhiChu;
			}
			set
			{
				if ((this._GhiChu != value))
				{
					this.OnGhiChuChanging(value);
					this.SendPropertyChanging();
					this._GhiChu = value;
					this.SendPropertyChanged("GhiChu");
					this.OnGhiChuChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NgayLam", DbType="Date")]
		public System.Nullable<System.DateTime> NgayLam
		{
			get
			{
				return this._NgayLam;
			}
			set
			{
				if ((this._NgayLam != value))
				{
					this.OnNgayLamChanging(value);
					this.SendPropertyChanging();
					this._NgayLam = value;
					this.SendPropertyChanged("NgayLam");
					this.OnNgayLamChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="NhanVien_ChamCong", Storage="_NhanVien", ThisKey="IDNhanVien", OtherKey="IDNhanVien", IsForeignKey=true)]
		public NhanVien NhanVien
		{
			get
			{
				return this._NhanVien.Entity;
			}
			set
			{
				NhanVien previousValue = this._NhanVien.Entity;
				if (((previousValue != value) 
							|| (this._NhanVien.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._NhanVien.Entity = null;
						previousValue.ChamCongs.Remove(this);
					}
					this._NhanVien.Entity = value;
					if ((value != null))
					{
						value.ChamCongs.Add(this);
						this._IDNhanVien = value.IDNhanVien;
					}
					else
					{
						this._IDNhanVien = default(Nullable<int>);
					}
					this.SendPropertyChanged("NhanVien");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CaLam_ChamCong", Storage="_CaLam", ThisKey="IDCa", OtherKey="IDCa", IsForeignKey=true)]
		public CaLam CaLam
		{
			get
			{
				return this._CaLam.Entity;
			}
			set
			{
				CaLam previousValue = this._CaLam.Entity;
				if (((previousValue != value) 
							|| (this._CaLam.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CaLam.Entity = null;
						previousValue.ChamCongs.Remove(this);
					}
					this._CaLam.Entity = value;
					if ((value != null))
					{
						value.ChamCongs.Add(this);
						this._IDCa = value.IDCa;
					}
					else
					{
						this._IDCa = default(Nullable<int>);
					}
					this.SendPropertyChanged("CaLam");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CTHoaDon")]
	public partial class CTHoaDon : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IDCTHoaDon;
		
		private System.Nullable<int> _IDHoaDon;
		
		private System.Nullable<int> _IDMonAn;
		
		private System.Nullable<int> _SoLuong;
		
		private EntityRef<HoaDon> _HoaDon;
		
		private EntityRef<MonAn> _MonAn;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDCTHoaDonChanging(int value);
    partial void OnIDCTHoaDonChanged();
    partial void OnIDHoaDonChanging(System.Nullable<int> value);
    partial void OnIDHoaDonChanged();
    partial void OnIDMonAnChanging(System.Nullable<int> value);
    partial void OnIDMonAnChanged();
    partial void OnSoLuongChanging(System.Nullable<int> value);
    partial void OnSoLuongChanged();
    #endregion
		
		public CTHoaDon()
		{
			this._HoaDon = default(EntityRef<HoaDon>);
			this._MonAn = default(EntityRef<MonAn>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDCTHoaDon", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IDCTHoaDon
		{
			get
			{
				return this._IDCTHoaDon;
			}
			set
			{
				if ((this._IDCTHoaDon != value))
				{
					this.OnIDCTHoaDonChanging(value);
					this.SendPropertyChanging();
					this._IDCTHoaDon = value;
					this.SendPropertyChanged("IDCTHoaDon");
					this.OnIDCTHoaDonChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDHoaDon", DbType="Int")]
		public System.Nullable<int> IDHoaDon
		{
			get
			{
				return this._IDHoaDon;
			}
			set
			{
				if ((this._IDHoaDon != value))
				{
					if (this._HoaDon.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDHoaDonChanging(value);
					this.SendPropertyChanging();
					this._IDHoaDon = value;
					this.SendPropertyChanged("IDHoaDon");
					this.OnIDHoaDonChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDMonAn", DbType="Int")]
		public System.Nullable<int> IDMonAn
		{
			get
			{
				return this._IDMonAn;
			}
			set
			{
				if ((this._IDMonAn != value))
				{
					if (this._MonAn.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDMonAnChanging(value);
					this.SendPropertyChanging();
					this._IDMonAn = value;
					this.SendPropertyChanged("IDMonAn");
					this.OnIDMonAnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SoLuong", DbType="Int")]
		public System.Nullable<int> SoLuong
		{
			get
			{
				return this._SoLuong;
			}
			set
			{
				if ((this._SoLuong != value))
				{
					this.OnSoLuongChanging(value);
					this.SendPropertyChanging();
					this._SoLuong = value;
					this.SendPropertyChanged("SoLuong");
					this.OnSoLuongChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="HoaDon_CTHoaDon", Storage="_HoaDon", ThisKey="IDHoaDon", OtherKey="IDHoaDon", IsForeignKey=true)]
		public HoaDon HoaDon
		{
			get
			{
				return this._HoaDon.Entity;
			}
			set
			{
				HoaDon previousValue = this._HoaDon.Entity;
				if (((previousValue != value) 
							|| (this._HoaDon.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._HoaDon.Entity = null;
						previousValue.CTHoaDons.Remove(this);
					}
					this._HoaDon.Entity = value;
					if ((value != null))
					{
						value.CTHoaDons.Add(this);
						this._IDHoaDon = value.IDHoaDon;
					}
					else
					{
						this._IDHoaDon = default(Nullable<int>);
					}
					this.SendPropertyChanged("HoaDon");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MonAn_CTHoaDon", Storage="_MonAn", ThisKey="IDMonAn", OtherKey="IDMonAn", IsForeignKey=true)]
		public MonAn MonAn
		{
			get
			{
				return this._MonAn.Entity;
			}
			set
			{
				MonAn previousValue = this._MonAn.Entity;
				if (((previousValue != value) 
							|| (this._MonAn.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MonAn.Entity = null;
						previousValue.CTHoaDons.Remove(this);
					}
					this._MonAn.Entity = value;
					if ((value != null))
					{
						value.CTHoaDons.Add(this);
						this._IDMonAn = value.IDMonAn;
					}
					else
					{
						this._IDMonAn = default(Nullable<int>);
					}
					this.SendPropertyChanged("MonAn");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CTNhapKho")]
	public partial class CTNhapKho : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IDCTNhap;
		
		private System.Nullable<int> _IDNhap;
		
		private System.Nullable<int> _IDNguyenLieu;
		
		private System.Nullable<int> _SoLuongNhap;
		
		private System.Nullable<double> _GiaNhap;
		
		private EntityRef<NguyenLieu> _NguyenLieu;
		
		private EntityRef<NhapKho> _NhapKho;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDCTNhapChanging(int value);
    partial void OnIDCTNhapChanged();
    partial void OnIDNhapChanging(System.Nullable<int> value);
    partial void OnIDNhapChanged();
    partial void OnIDNguyenLieuChanging(System.Nullable<int> value);
    partial void OnIDNguyenLieuChanged();
    partial void OnSoLuongNhapChanging(System.Nullable<int> value);
    partial void OnSoLuongNhapChanged();
    partial void OnGiaNhapChanging(System.Nullable<double> value);
    partial void OnGiaNhapChanged();
    #endregion
		
		public CTNhapKho()
		{
			this._NguyenLieu = default(EntityRef<NguyenLieu>);
			this._NhapKho = default(EntityRef<NhapKho>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDCTNhap", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IDCTNhap
		{
			get
			{
				return this._IDCTNhap;
			}
			set
			{
				if ((this._IDCTNhap != value))
				{
					this.OnIDCTNhapChanging(value);
					this.SendPropertyChanging();
					this._IDCTNhap = value;
					this.SendPropertyChanged("IDCTNhap");
					this.OnIDCTNhapChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDNhap", DbType="Int")]
		public System.Nullable<int> IDNhap
		{
			get
			{
				return this._IDNhap;
			}
			set
			{
				if ((this._IDNhap != value))
				{
					if (this._NhapKho.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDNhapChanging(value);
					this.SendPropertyChanging();
					this._IDNhap = value;
					this.SendPropertyChanged("IDNhap");
					this.OnIDNhapChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDNguyenLieu", DbType="Int")]
		public System.Nullable<int> IDNguyenLieu
		{
			get
			{
				return this._IDNguyenLieu;
			}
			set
			{
				if ((this._IDNguyenLieu != value))
				{
					if (this._NguyenLieu.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDNguyenLieuChanging(value);
					this.SendPropertyChanging();
					this._IDNguyenLieu = value;
					this.SendPropertyChanged("IDNguyenLieu");
					this.OnIDNguyenLieuChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SoLuongNhap", DbType="Int")]
		public System.Nullable<int> SoLuongNhap
		{
			get
			{
				return this._SoLuongNhap;
			}
			set
			{
				if ((this._SoLuongNhap != value))
				{
					this.OnSoLuongNhapChanging(value);
					this.SendPropertyChanging();
					this._SoLuongNhap = value;
					this.SendPropertyChanged("SoLuongNhap");
					this.OnSoLuongNhapChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GiaNhap", DbType="Float")]
		public System.Nullable<double> GiaNhap
		{
			get
			{
				return this._GiaNhap;
			}
			set
			{
				if ((this._GiaNhap != value))
				{
					this.OnGiaNhapChanging(value);
					this.SendPropertyChanging();
					this._GiaNhap = value;
					this.SendPropertyChanged("GiaNhap");
					this.OnGiaNhapChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="NguyenLieu_CTNhapKho", Storage="_NguyenLieu", ThisKey="IDNguyenLieu", OtherKey="IDNguyenLieu", IsForeignKey=true)]
		public NguyenLieu NguyenLieu
		{
			get
			{
				return this._NguyenLieu.Entity;
			}
			set
			{
				NguyenLieu previousValue = this._NguyenLieu.Entity;
				if (((previousValue != value) 
							|| (this._NguyenLieu.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._NguyenLieu.Entity = null;
						previousValue.CTNhapKhos.Remove(this);
					}
					this._NguyenLieu.Entity = value;
					if ((value != null))
					{
						value.CTNhapKhos.Add(this);
						this._IDNguyenLieu = value.IDNguyenLieu;
					}
					else
					{
						this._IDNguyenLieu = default(Nullable<int>);
					}
					this.SendPropertyChanged("NguyenLieu");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="NhapKho_CTNhapKho", Storage="_NhapKho", ThisKey="IDNhap", OtherKey="IDNhap", IsForeignKey=true)]
		public NhapKho NhapKho
		{
			get
			{
				return this._NhapKho.Entity;
			}
			set
			{
				NhapKho previousValue = this._NhapKho.Entity;
				if (((previousValue != value) 
							|| (this._NhapKho.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._NhapKho.Entity = null;
						previousValue.CTNhapKhos.Remove(this);
					}
					this._NhapKho.Entity = value;
					if ((value != null))
					{
						value.CTNhapKhos.Add(this);
						this._IDNhap = value.IDNhap;
					}
					else
					{
						this._IDNhap = default(Nullable<int>);
					}
					this.SendPropertyChanged("NhapKho");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DatBan")]
	public partial class DatBan : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IDDatBan;
		
		private System.Nullable<System.DateTime> _NgayDat;
		
		private System.Nullable<int> _IDNhanVien;
		
		private System.Nullable<int> _IDKhachHang;
		
		private System.Nullable<int> _IDBanAn;
		
		private System.Nullable<int> _TrangThai;
		
		private EntitySet<HoaDon> _HoaDons;
		
		private EntityRef<BanAn> _BanAn;
		
		private EntityRef<KhachHang> _KhachHang;
		
		private EntityRef<NhanVien> _NhanVien;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDDatBanChanging(int value);
    partial void OnIDDatBanChanged();
    partial void OnNgayDatChanging(System.Nullable<System.DateTime> value);
    partial void OnNgayDatChanged();
    partial void OnIDNhanVienChanging(System.Nullable<int> value);
    partial void OnIDNhanVienChanged();
    partial void OnIDKhachHangChanging(System.Nullable<int> value);
    partial void OnIDKhachHangChanged();
    partial void OnIDBanAnChanging(System.Nullable<int> value);
    partial void OnIDBanAnChanged();
    partial void OnTrangThaiChanging(System.Nullable<int> value);
    partial void OnTrangThaiChanged();
    #endregion
		
		public DatBan()
		{
			this._HoaDons = new EntitySet<HoaDon>(new Action<HoaDon>(this.attach_HoaDons), new Action<HoaDon>(this.detach_HoaDons));
			this._BanAn = default(EntityRef<BanAn>);
			this._KhachHang = default(EntityRef<KhachHang>);
			this._NhanVien = default(EntityRef<NhanVien>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDDatBan", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IDDatBan
		{
			get
			{
				return this._IDDatBan;
			}
			set
			{
				if ((this._IDDatBan != value))
				{
					this.OnIDDatBanChanging(value);
					this.SendPropertyChanging();
					this._IDDatBan = value;
					this.SendPropertyChanged("IDDatBan");
					this.OnIDDatBanChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NgayDat", DbType="Date")]
		public System.Nullable<System.DateTime> NgayDat
		{
			get
			{
				return this._NgayDat;
			}
			set
			{
				if ((this._NgayDat != value))
				{
					this.OnNgayDatChanging(value);
					this.SendPropertyChanging();
					this._NgayDat = value;
					this.SendPropertyChanged("NgayDat");
					this.OnNgayDatChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDNhanVien", DbType="Int")]
		public System.Nullable<int> IDNhanVien
		{
			get
			{
				return this._IDNhanVien;
			}
			set
			{
				if ((this._IDNhanVien != value))
				{
					if (this._NhanVien.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDNhanVienChanging(value);
					this.SendPropertyChanging();
					this._IDNhanVien = value;
					this.SendPropertyChanged("IDNhanVien");
					this.OnIDNhanVienChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDKhachHang", DbType="Int")]
		public System.Nullable<int> IDKhachHang
		{
			get
			{
				return this._IDKhachHang;
			}
			set
			{
				if ((this._IDKhachHang != value))
				{
					if (this._KhachHang.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDKhachHangChanging(value);
					this.SendPropertyChanging();
					this._IDKhachHang = value;
					this.SendPropertyChanged("IDKhachHang");
					this.OnIDKhachHangChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDBanAn", DbType="Int")]
		public System.Nullable<int> IDBanAn
		{
			get
			{
				return this._IDBanAn;
			}
			set
			{
				if ((this._IDBanAn != value))
				{
					if (this._BanAn.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDBanAnChanging(value);
					this.SendPropertyChanging();
					this._IDBanAn = value;
					this.SendPropertyChanged("IDBanAn");
					this.OnIDBanAnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TrangThai", DbType="Int")]
		public System.Nullable<int> TrangThai
		{
			get
			{
				return this._TrangThai;
			}
			set
			{
				if ((this._TrangThai != value))
				{
					this.OnTrangThaiChanging(value);
					this.SendPropertyChanging();
					this._TrangThai = value;
					this.SendPropertyChanged("TrangThai");
					this.OnTrangThaiChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DatBan_HoaDon", Storage="_HoaDons", ThisKey="IDDatBan", OtherKey="IDDatBan")]
		public EntitySet<HoaDon> HoaDons
		{
			get
			{
				return this._HoaDons;
			}
			set
			{
				this._HoaDons.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BanAn_DatBan", Storage="_BanAn", ThisKey="IDBanAn", OtherKey="IDBanAn", IsForeignKey=true)]
		public BanAn BanAn
		{
			get
			{
				return this._BanAn.Entity;
			}
			set
			{
				BanAn previousValue = this._BanAn.Entity;
				if (((previousValue != value) 
							|| (this._BanAn.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BanAn.Entity = null;
						previousValue.DatBans.Remove(this);
					}
					this._BanAn.Entity = value;
					if ((value != null))
					{
						value.DatBans.Add(this);
						this._IDBanAn = value.IDBanAn;
					}
					else
					{
						this._IDBanAn = default(Nullable<int>);
					}
					this.SendPropertyChanged("BanAn");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="KhachHang_DatBan", Storage="_KhachHang", ThisKey="IDKhachHang", OtherKey="IDKhachHang", IsForeignKey=true)]
		public KhachHang KhachHang
		{
			get
			{
				return this._KhachHang.Entity;
			}
			set
			{
				KhachHang previousValue = this._KhachHang.Entity;
				if (((previousValue != value) 
							|| (this._KhachHang.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._KhachHang.Entity = null;
						previousValue.DatBans.Remove(this);
					}
					this._KhachHang.Entity = value;
					if ((value != null))
					{
						value.DatBans.Add(this);
						this._IDKhachHang = value.IDKhachHang;
					}
					else
					{
						this._IDKhachHang = default(Nullable<int>);
					}
					this.SendPropertyChanged("KhachHang");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="NhanVien_DatBan", Storage="_NhanVien", ThisKey="IDNhanVien", OtherKey="IDNhanVien", IsForeignKey=true)]
		public NhanVien NhanVien
		{
			get
			{
				return this._NhanVien.Entity;
			}
			set
			{
				NhanVien previousValue = this._NhanVien.Entity;
				if (((previousValue != value) 
							|| (this._NhanVien.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._NhanVien.Entity = null;
						previousValue.DatBans.Remove(this);
					}
					this._NhanVien.Entity = value;
					if ((value != null))
					{
						value.DatBans.Add(this);
						this._IDNhanVien = value.IDNhanVien;
					}
					else
					{
						this._IDNhanVien = default(Nullable<int>);
					}
					this.SendPropertyChanged("NhanVien");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_HoaDons(HoaDon entity)
		{
			this.SendPropertyChanging();
			entity.DatBan = this;
		}
		
		private void detach_HoaDons(HoaDon entity)
		{
			this.SendPropertyChanging();
			entity.DatBan = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.HoaDon")]
	public partial class HoaDon : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IDHoaDon;
		
		private System.Nullable<int> _IDDatBan;
		
		private System.Nullable<int> _IDKhachHang;
		
		private System.Nullable<int> _TrangThai;
		
		private string _GhiChu;
		
		private System.Nullable<double> _GiamGia;
		
		private System.Nullable<double> _TongTien;
		
		private EntitySet<CTHoaDon> _CTHoaDons;
		
		private EntityRef<DatBan> _DatBan;
		
		private EntityRef<KhachHang> _KhachHang;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDHoaDonChanging(int value);
    partial void OnIDHoaDonChanged();
    partial void OnIDDatBanChanging(System.Nullable<int> value);
    partial void OnIDDatBanChanged();
    partial void OnIDKhachHangChanging(System.Nullable<int> value);
    partial void OnIDKhachHangChanged();
    partial void OnTrangThaiChanging(System.Nullable<int> value);
    partial void OnTrangThaiChanged();
    partial void OnGhiChuChanging(string value);
    partial void OnGhiChuChanged();
    partial void OnGiamGiaChanging(System.Nullable<double> value);
    partial void OnGiamGiaChanged();
    partial void OnTongTienChanging(System.Nullable<double> value);
    partial void OnTongTienChanged();
    #endregion
		
		public HoaDon()
		{
			this._CTHoaDons = new EntitySet<CTHoaDon>(new Action<CTHoaDon>(this.attach_CTHoaDons), new Action<CTHoaDon>(this.detach_CTHoaDons));
			this._DatBan = default(EntityRef<DatBan>);
			this._KhachHang = default(EntityRef<KhachHang>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDHoaDon", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IDHoaDon
		{
			get
			{
				return this._IDHoaDon;
			}
			set
			{
				if ((this._IDHoaDon != value))
				{
					this.OnIDHoaDonChanging(value);
					this.SendPropertyChanging();
					this._IDHoaDon = value;
					this.SendPropertyChanged("IDHoaDon");
					this.OnIDHoaDonChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDDatBan", DbType="Int")]
		public System.Nullable<int> IDDatBan
		{
			get
			{
				return this._IDDatBan;
			}
			set
			{
				if ((this._IDDatBan != value))
				{
					if (this._DatBan.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDDatBanChanging(value);
					this.SendPropertyChanging();
					this._IDDatBan = value;
					this.SendPropertyChanged("IDDatBan");
					this.OnIDDatBanChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDKhachHang", DbType="Int")]
		public System.Nullable<int> IDKhachHang
		{
			get
			{
				return this._IDKhachHang;
			}
			set
			{
				if ((this._IDKhachHang != value))
				{
					if (this._KhachHang.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDKhachHangChanging(value);
					this.SendPropertyChanging();
					this._IDKhachHang = value;
					this.SendPropertyChanged("IDKhachHang");
					this.OnIDKhachHangChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TrangThai", DbType="Int")]
		public System.Nullable<int> TrangThai
		{
			get
			{
				return this._TrangThai;
			}
			set
			{
				if ((this._TrangThai != value))
				{
					this.OnTrangThaiChanging(value);
					this.SendPropertyChanging();
					this._TrangThai = value;
					this.SendPropertyChanged("TrangThai");
					this.OnTrangThaiChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GhiChu", DbType="NVarChar(100)")]
		public string GhiChu
		{
			get
			{
				return this._GhiChu;
			}
			set
			{
				if ((this._GhiChu != value))
				{
					this.OnGhiChuChanging(value);
					this.SendPropertyChanging();
					this._GhiChu = value;
					this.SendPropertyChanged("GhiChu");
					this.OnGhiChuChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GiamGia", DbType="Float")]
		public System.Nullable<double> GiamGia
		{
			get
			{
				return this._GiamGia;
			}
			set
			{
				if ((this._GiamGia != value))
				{
					this.OnGiamGiaChanging(value);
					this.SendPropertyChanging();
					this._GiamGia = value;
					this.SendPropertyChanged("GiamGia");
					this.OnGiamGiaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TongTien", DbType="Float")]
		public System.Nullable<double> TongTien
		{
			get
			{
				return this._TongTien;
			}
			set
			{
				if ((this._TongTien != value))
				{
					this.OnTongTienChanging(value);
					this.SendPropertyChanging();
					this._TongTien = value;
					this.SendPropertyChanged("TongTien");
					this.OnTongTienChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="HoaDon_CTHoaDon", Storage="_CTHoaDons", ThisKey="IDHoaDon", OtherKey="IDHoaDon")]
		public EntitySet<CTHoaDon> CTHoaDons
		{
			get
			{
				return this._CTHoaDons;
			}
			set
			{
				this._CTHoaDons.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DatBan_HoaDon", Storage="_DatBan", ThisKey="IDDatBan", OtherKey="IDDatBan", IsForeignKey=true)]
		public DatBan DatBan
		{
			get
			{
				return this._DatBan.Entity;
			}
			set
			{
				DatBan previousValue = this._DatBan.Entity;
				if (((previousValue != value) 
							|| (this._DatBan.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DatBan.Entity = null;
						previousValue.HoaDons.Remove(this);
					}
					this._DatBan.Entity = value;
					if ((value != null))
					{
						value.HoaDons.Add(this);
						this._IDDatBan = value.IDDatBan;
					}
					else
					{
						this._IDDatBan = default(Nullable<int>);
					}
					this.SendPropertyChanged("DatBan");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="KhachHang_HoaDon", Storage="_KhachHang", ThisKey="IDKhachHang", OtherKey="IDKhachHang", IsForeignKey=true)]
		public KhachHang KhachHang
		{
			get
			{
				return this._KhachHang.Entity;
			}
			set
			{
				KhachHang previousValue = this._KhachHang.Entity;
				if (((previousValue != value) 
							|| (this._KhachHang.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._KhachHang.Entity = null;
						previousValue.HoaDons.Remove(this);
					}
					this._KhachHang.Entity = value;
					if ((value != null))
					{
						value.HoaDons.Add(this);
						this._IDKhachHang = value.IDKhachHang;
					}
					else
					{
						this._IDKhachHang = default(Nullable<int>);
					}
					this.SendPropertyChanged("KhachHang");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CTHoaDons(CTHoaDon entity)
		{
			this.SendPropertyChanging();
			entity.HoaDon = this;
		}
		
		private void detach_CTHoaDons(CTHoaDon entity)
		{
			this.SendPropertyChanging();
			entity.HoaDon = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.KhachHang")]
	public partial class KhachHang : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IDKhachHang;
		
		private System.Nullable<int> _CMND;
		
		private string _TenKhachHang;
		
		private string _SDTKhachHang;
		
		private System.Nullable<double> _SoTienTichLuy;
		
		private EntitySet<DatBan> _DatBans;
		
		private EntitySet<HoaDon> _HoaDons;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDKhachHangChanging(int value);
    partial void OnIDKhachHangChanged();
    partial void OnCMNDChanging(System.Nullable<int> value);
    partial void OnCMNDChanged();
    partial void OnTenKhachHangChanging(string value);
    partial void OnTenKhachHangChanged();
    partial void OnSDTKhachHangChanging(string value);
    partial void OnSDTKhachHangChanged();
    partial void OnSoTienTichLuyChanging(System.Nullable<double> value);
    partial void OnSoTienTichLuyChanged();
    #endregion
		
		public KhachHang()
		{
			this._DatBans = new EntitySet<DatBan>(new Action<DatBan>(this.attach_DatBans), new Action<DatBan>(this.detach_DatBans));
			this._HoaDons = new EntitySet<HoaDon>(new Action<HoaDon>(this.attach_HoaDons), new Action<HoaDon>(this.detach_HoaDons));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDKhachHang", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IDKhachHang
		{
			get
			{
				return this._IDKhachHang;
			}
			set
			{
				if ((this._IDKhachHang != value))
				{
					this.OnIDKhachHangChanging(value);
					this.SendPropertyChanging();
					this._IDKhachHang = value;
					this.SendPropertyChanged("IDKhachHang");
					this.OnIDKhachHangChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CMND", DbType="Int")]
		public System.Nullable<int> CMND
		{
			get
			{
				return this._CMND;
			}
			set
			{
				if ((this._CMND != value))
				{
					this.OnCMNDChanging(value);
					this.SendPropertyChanging();
					this._CMND = value;
					this.SendPropertyChanged("CMND");
					this.OnCMNDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TenKhachHang", DbType="NVarChar(30)")]
		public string TenKhachHang
		{
			get
			{
				return this._TenKhachHang;
			}
			set
			{
				if ((this._TenKhachHang != value))
				{
					this.OnTenKhachHangChanging(value);
					this.SendPropertyChanging();
					this._TenKhachHang = value;
					this.SendPropertyChanged("TenKhachHang");
					this.OnTenKhachHangChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SDTKhachHang", DbType="NChar(12)")]
		public string SDTKhachHang
		{
			get
			{
				return this._SDTKhachHang;
			}
			set
			{
				if ((this._SDTKhachHang != value))
				{
					this.OnSDTKhachHangChanging(value);
					this.SendPropertyChanging();
					this._SDTKhachHang = value;
					this.SendPropertyChanged("SDTKhachHang");
					this.OnSDTKhachHangChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SoTienTichLuy", DbType="Float")]
		public System.Nullable<double> SoTienTichLuy
		{
			get
			{
				return this._SoTienTichLuy;
			}
			set
			{
				if ((this._SoTienTichLuy != value))
				{
					this.OnSoTienTichLuyChanging(value);
					this.SendPropertyChanging();
					this._SoTienTichLuy = value;
					this.SendPropertyChanged("SoTienTichLuy");
					this.OnSoTienTichLuyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="KhachHang_DatBan", Storage="_DatBans", ThisKey="IDKhachHang", OtherKey="IDKhachHang")]
		public EntitySet<DatBan> DatBans
		{
			get
			{
				return this._DatBans;
			}
			set
			{
				this._DatBans.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="KhachHang_HoaDon", Storage="_HoaDons", ThisKey="IDKhachHang", OtherKey="IDKhachHang")]
		public EntitySet<HoaDon> HoaDons
		{
			get
			{
				return this._HoaDons;
			}
			set
			{
				this._HoaDons.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DatBans(DatBan entity)
		{
			this.SendPropertyChanging();
			entity.KhachHang = this;
		}
		
		private void detach_DatBans(DatBan entity)
		{
			this.SendPropertyChanging();
			entity.KhachHang = null;
		}
		
		private void attach_HoaDons(HoaDon entity)
		{
			this.SendPropertyChanging();
			entity.KhachHang = this;
		}
		
		private void detach_HoaDons(HoaDon entity)
		{
			this.SendPropertyChanging();
			entity.KhachHang = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LoaiMonAn")]
	public partial class LoaiMonAn : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IDLoaiMon;
		
		private string _TenLoaiMon;
		
		private EntitySet<MonAn> _MonAns;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDLoaiMonChanging(int value);
    partial void OnIDLoaiMonChanged();
    partial void OnTenLoaiMonChanging(string value);
    partial void OnTenLoaiMonChanged();
    #endregion
		
		public LoaiMonAn()
		{
			this._MonAns = new EntitySet<MonAn>(new Action<MonAn>(this.attach_MonAns), new Action<MonAn>(this.detach_MonAns));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDLoaiMon", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IDLoaiMon
		{
			get
			{
				return this._IDLoaiMon;
			}
			set
			{
				if ((this._IDLoaiMon != value))
				{
					this.OnIDLoaiMonChanging(value);
					this.SendPropertyChanging();
					this._IDLoaiMon = value;
					this.SendPropertyChanged("IDLoaiMon");
					this.OnIDLoaiMonChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TenLoaiMon", DbType="NVarChar(30)")]
		public string TenLoaiMon
		{
			get
			{
				return this._TenLoaiMon;
			}
			set
			{
				if ((this._TenLoaiMon != value))
				{
					this.OnTenLoaiMonChanging(value);
					this.SendPropertyChanging();
					this._TenLoaiMon = value;
					this.SendPropertyChanged("TenLoaiMon");
					this.OnTenLoaiMonChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LoaiMonAn_MonAn", Storage="_MonAns", ThisKey="IDLoaiMon", OtherKey="IDLoaiMon")]
		public EntitySet<MonAn> MonAns
		{
			get
			{
				return this._MonAns;
			}
			set
			{
				this._MonAns.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MonAns(MonAn entity)
		{
			this.SendPropertyChanging();
			entity.LoaiMonAn = this;
		}
		
		private void detach_MonAns(MonAn entity)
		{
			this.SendPropertyChanging();
			entity.LoaiMonAn = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LoaiNguyenLieu")]
	public partial class LoaiNguyenLieu : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IDLoaiNL;
		
		private string _TenLoaiNL;
		
		private EntitySet<NguyenLieu> _NguyenLieus;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDLoaiNLChanging(int value);
    partial void OnIDLoaiNLChanged();
    partial void OnTenLoaiNLChanging(string value);
    partial void OnTenLoaiNLChanged();
    #endregion
		
		public LoaiNguyenLieu()
		{
			this._NguyenLieus = new EntitySet<NguyenLieu>(new Action<NguyenLieu>(this.attach_NguyenLieus), new Action<NguyenLieu>(this.detach_NguyenLieus));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDLoaiNL", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IDLoaiNL
		{
			get
			{
				return this._IDLoaiNL;
			}
			set
			{
				if ((this._IDLoaiNL != value))
				{
					this.OnIDLoaiNLChanging(value);
					this.SendPropertyChanging();
					this._IDLoaiNL = value;
					this.SendPropertyChanged("IDLoaiNL");
					this.OnIDLoaiNLChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TenLoaiNL", DbType="NVarChar(30)")]
		public string TenLoaiNL
		{
			get
			{
				return this._TenLoaiNL;
			}
			set
			{
				if ((this._TenLoaiNL != value))
				{
					this.OnTenLoaiNLChanging(value);
					this.SendPropertyChanging();
					this._TenLoaiNL = value;
					this.SendPropertyChanged("TenLoaiNL");
					this.OnTenLoaiNLChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LoaiNguyenLieu_NguyenLieu", Storage="_NguyenLieus", ThisKey="IDLoaiNL", OtherKey="IDLoaiNL")]
		public EntitySet<NguyenLieu> NguyenLieus
		{
			get
			{
				return this._NguyenLieus;
			}
			set
			{
				this._NguyenLieus.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_NguyenLieus(NguyenLieu entity)
		{
			this.SendPropertyChanging();
			entity.LoaiNguyenLieu = this;
		}
		
		private void detach_NguyenLieus(NguyenLieu entity)
		{
			this.SendPropertyChanging();
			entity.LoaiNguyenLieu = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MonAn")]
	public partial class MonAn : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IDMonAn;
		
		private string _TenMonAn;
		
		private System.Nullable<int> _IDLoaiMon;
		
		private System.Nullable<int> _GiaMonAn;
		
		private System.Nullable<int> _TrangThai;
		
		private EntitySet<ThanhPhanMonAn> _ThanhPhanMonAns;
		
		private EntitySet<BillInfo> _BillInfos;
		
		private EntitySet<CTHoaDon> _CTHoaDons;
		
		private EntityRef<LoaiMonAn> _LoaiMonAn;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDMonAnChanging(int value);
    partial void OnIDMonAnChanged();
    partial void OnTenMonAnChanging(string value);
    partial void OnTenMonAnChanged();
    partial void OnIDLoaiMonChanging(System.Nullable<int> value);
    partial void OnIDLoaiMonChanged();
    partial void OnGiaMonAnChanging(System.Nullable<int> value);
    partial void OnGiaMonAnChanged();
    partial void OnTrangThaiChanging(System.Nullable<int> value);
    partial void OnTrangThaiChanged();
    #endregion
		
		public MonAn()
		{
			this._ThanhPhanMonAns = new EntitySet<ThanhPhanMonAn>(new Action<ThanhPhanMonAn>(this.attach_ThanhPhanMonAns), new Action<ThanhPhanMonAn>(this.detach_ThanhPhanMonAns));
			this._BillInfos = new EntitySet<BillInfo>(new Action<BillInfo>(this.attach_BillInfos), new Action<BillInfo>(this.detach_BillInfos));
			this._CTHoaDons = new EntitySet<CTHoaDon>(new Action<CTHoaDon>(this.attach_CTHoaDons), new Action<CTHoaDon>(this.detach_CTHoaDons));
			this._LoaiMonAn = default(EntityRef<LoaiMonAn>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDMonAn", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IDMonAn
		{
			get
			{
				return this._IDMonAn;
			}
			set
			{
				if ((this._IDMonAn != value))
				{
					this.OnIDMonAnChanging(value);
					this.SendPropertyChanging();
					this._IDMonAn = value;
					this.SendPropertyChanged("IDMonAn");
					this.OnIDMonAnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TenMonAn", DbType="NVarChar(50)")]
		public string TenMonAn
		{
			get
			{
				return this._TenMonAn;
			}
			set
			{
				if ((this._TenMonAn != value))
				{
					this.OnTenMonAnChanging(value);
					this.SendPropertyChanging();
					this._TenMonAn = value;
					this.SendPropertyChanged("TenMonAn");
					this.OnTenMonAnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDLoaiMon", DbType="Int")]
		public System.Nullable<int> IDLoaiMon
		{
			get
			{
				return this._IDLoaiMon;
			}
			set
			{
				if ((this._IDLoaiMon != value))
				{
					if (this._LoaiMonAn.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDLoaiMonChanging(value);
					this.SendPropertyChanging();
					this._IDLoaiMon = value;
					this.SendPropertyChanged("IDLoaiMon");
					this.OnIDLoaiMonChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GiaMonAn", DbType="Int")]
		public System.Nullable<int> GiaMonAn
		{
			get
			{
				return this._GiaMonAn;
			}
			set
			{
				if ((this._GiaMonAn != value))
				{
					this.OnGiaMonAnChanging(value);
					this.SendPropertyChanging();
					this._GiaMonAn = value;
					this.SendPropertyChanged("GiaMonAn");
					this.OnGiaMonAnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TrangThai", DbType="Int")]
		public System.Nullable<int> TrangThai
		{
			get
			{
				return this._TrangThai;
			}
			set
			{
				if ((this._TrangThai != value))
				{
					this.OnTrangThaiChanging(value);
					this.SendPropertyChanging();
					this._TrangThai = value;
					this.SendPropertyChanged("TrangThai");
					this.OnTrangThaiChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MonAn_ThanhPhanMonAn", Storage="_ThanhPhanMonAns", ThisKey="IDMonAn", OtherKey="IDMonAn")]
		public EntitySet<ThanhPhanMonAn> ThanhPhanMonAns
		{
			get
			{
				return this._ThanhPhanMonAns;
			}
			set
			{
				this._ThanhPhanMonAns.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MonAn_BillInfo", Storage="_BillInfos", ThisKey="IDMonAn", OtherKey="IDMonAn")]
		public EntitySet<BillInfo> BillInfos
		{
			get
			{
				return this._BillInfos;
			}
			set
			{
				this._BillInfos.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MonAn_CTHoaDon", Storage="_CTHoaDons", ThisKey="IDMonAn", OtherKey="IDMonAn")]
		public EntitySet<CTHoaDon> CTHoaDons
		{
			get
			{
				return this._CTHoaDons;
			}
			set
			{
				this._CTHoaDons.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LoaiMonAn_MonAn", Storage="_LoaiMonAn", ThisKey="IDLoaiMon", OtherKey="IDLoaiMon", IsForeignKey=true)]
		public LoaiMonAn LoaiMonAn
		{
			get
			{
				return this._LoaiMonAn.Entity;
			}
			set
			{
				LoaiMonAn previousValue = this._LoaiMonAn.Entity;
				if (((previousValue != value) 
							|| (this._LoaiMonAn.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LoaiMonAn.Entity = null;
						previousValue.MonAns.Remove(this);
					}
					this._LoaiMonAn.Entity = value;
					if ((value != null))
					{
						value.MonAns.Add(this);
						this._IDLoaiMon = value.IDLoaiMon;
					}
					else
					{
						this._IDLoaiMon = default(Nullable<int>);
					}
					this.SendPropertyChanged("LoaiMonAn");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ThanhPhanMonAns(ThanhPhanMonAn entity)
		{
			this.SendPropertyChanging();
			entity.MonAn = this;
		}
		
		private void detach_ThanhPhanMonAns(ThanhPhanMonAn entity)
		{
			this.SendPropertyChanging();
			entity.MonAn = null;
		}
		
		private void attach_BillInfos(BillInfo entity)
		{
			this.SendPropertyChanging();
			entity.MonAn = this;
		}
		
		private void detach_BillInfos(BillInfo entity)
		{
			this.SendPropertyChanging();
			entity.MonAn = null;
		}
		
		private void attach_CTHoaDons(CTHoaDon entity)
		{
			this.SendPropertyChanging();
			entity.MonAn = this;
		}
		
		private void detach_CTHoaDons(CTHoaDon entity)
		{
			this.SendPropertyChanging();
			entity.MonAn = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.NguyenLieu")]
	public partial class NguyenLieu : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IDNguyenLieu;
		
		private System.Nullable<int> _IDLoaiNL;
		
		private string _TenNguyenLieu;
		
		private string _DVT;
		
		private System.Nullable<int> _SoLuongTon;
		
		private EntitySet<ThanhPhanMonAn> _ThanhPhanMonAns;
		
		private EntitySet<CTNhapKho> _CTNhapKhos;
		
		private EntityRef<LoaiNguyenLieu> _LoaiNguyenLieu;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDNguyenLieuChanging(int value);
    partial void OnIDNguyenLieuChanged();
    partial void OnIDLoaiNLChanging(System.Nullable<int> value);
    partial void OnIDLoaiNLChanged();
    partial void OnTenNguyenLieuChanging(string value);
    partial void OnTenNguyenLieuChanged();
    partial void OnDVTChanging(string value);
    partial void OnDVTChanged();
    partial void OnSoLuongTonChanging(System.Nullable<int> value);
    partial void OnSoLuongTonChanged();
    #endregion
		
		public NguyenLieu()
		{
			this._ThanhPhanMonAns = new EntitySet<ThanhPhanMonAn>(new Action<ThanhPhanMonAn>(this.attach_ThanhPhanMonAns), new Action<ThanhPhanMonAn>(this.detach_ThanhPhanMonAns));
			this._CTNhapKhos = new EntitySet<CTNhapKho>(new Action<CTNhapKho>(this.attach_CTNhapKhos), new Action<CTNhapKho>(this.detach_CTNhapKhos));
			this._LoaiNguyenLieu = default(EntityRef<LoaiNguyenLieu>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDNguyenLieu", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IDNguyenLieu
		{
			get
			{
				return this._IDNguyenLieu;
			}
			set
			{
				if ((this._IDNguyenLieu != value))
				{
					this.OnIDNguyenLieuChanging(value);
					this.SendPropertyChanging();
					this._IDNguyenLieu = value;
					this.SendPropertyChanged("IDNguyenLieu");
					this.OnIDNguyenLieuChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDLoaiNL", DbType="Int")]
		public System.Nullable<int> IDLoaiNL
		{
			get
			{
				return this._IDLoaiNL;
			}
			set
			{
				if ((this._IDLoaiNL != value))
				{
					if (this._LoaiNguyenLieu.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDLoaiNLChanging(value);
					this.SendPropertyChanging();
					this._IDLoaiNL = value;
					this.SendPropertyChanged("IDLoaiNL");
					this.OnIDLoaiNLChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TenNguyenLieu", DbType="NVarChar(30)")]
		public string TenNguyenLieu
		{
			get
			{
				return this._TenNguyenLieu;
			}
			set
			{
				if ((this._TenNguyenLieu != value))
				{
					this.OnTenNguyenLieuChanging(value);
					this.SendPropertyChanging();
					this._TenNguyenLieu = value;
					this.SendPropertyChanged("TenNguyenLieu");
					this.OnTenNguyenLieuChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DVT", DbType="NVarChar(20)")]
		public string DVT
		{
			get
			{
				return this._DVT;
			}
			set
			{
				if ((this._DVT != value))
				{
					this.OnDVTChanging(value);
					this.SendPropertyChanging();
					this._DVT = value;
					this.SendPropertyChanged("DVT");
					this.OnDVTChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SoLuongTon", DbType="Int")]
		public System.Nullable<int> SoLuongTon
		{
			get
			{
				return this._SoLuongTon;
			}
			set
			{
				if ((this._SoLuongTon != value))
				{
					this.OnSoLuongTonChanging(value);
					this.SendPropertyChanging();
					this._SoLuongTon = value;
					this.SendPropertyChanged("SoLuongTon");
					this.OnSoLuongTonChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="NguyenLieu_ThanhPhanMonAn", Storage="_ThanhPhanMonAns", ThisKey="IDNguyenLieu", OtherKey="IDNguyenLieu")]
		public EntitySet<ThanhPhanMonAn> ThanhPhanMonAns
		{
			get
			{
				return this._ThanhPhanMonAns;
			}
			set
			{
				this._ThanhPhanMonAns.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="NguyenLieu_CTNhapKho", Storage="_CTNhapKhos", ThisKey="IDNguyenLieu", OtherKey="IDNguyenLieu")]
		public EntitySet<CTNhapKho> CTNhapKhos
		{
			get
			{
				return this._CTNhapKhos;
			}
			set
			{
				this._CTNhapKhos.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LoaiNguyenLieu_NguyenLieu", Storage="_LoaiNguyenLieu", ThisKey="IDLoaiNL", OtherKey="IDLoaiNL", IsForeignKey=true)]
		public LoaiNguyenLieu LoaiNguyenLieu
		{
			get
			{
				return this._LoaiNguyenLieu.Entity;
			}
			set
			{
				LoaiNguyenLieu previousValue = this._LoaiNguyenLieu.Entity;
				if (((previousValue != value) 
							|| (this._LoaiNguyenLieu.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LoaiNguyenLieu.Entity = null;
						previousValue.NguyenLieus.Remove(this);
					}
					this._LoaiNguyenLieu.Entity = value;
					if ((value != null))
					{
						value.NguyenLieus.Add(this);
						this._IDLoaiNL = value.IDLoaiNL;
					}
					else
					{
						this._IDLoaiNL = default(Nullable<int>);
					}
					this.SendPropertyChanged("LoaiNguyenLieu");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ThanhPhanMonAns(ThanhPhanMonAn entity)
		{
			this.SendPropertyChanging();
			entity.NguyenLieu = this;
		}
		
		private void detach_ThanhPhanMonAns(ThanhPhanMonAn entity)
		{
			this.SendPropertyChanging();
			entity.NguyenLieu = null;
		}
		
		private void attach_CTNhapKhos(CTNhapKho entity)
		{
			this.SendPropertyChanging();
			entity.NguyenLieu = this;
		}
		
		private void detach_CTNhapKhos(CTNhapKho entity)
		{
			this.SendPropertyChanging();
			entity.NguyenLieu = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.NhapKho")]
	public partial class NhapKho : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IDNhap;
		
		private System.Nullable<int> _IDNhanVien;
		
		private System.Nullable<System.DateTime> _NgayNhap;
		
		private System.Nullable<double> _TongTien;
		
		private EntitySet<CTNhapKho> _CTNhapKhos;
		
		private EntityRef<NhanVien> _NhanVien;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDNhapChanging(int value);
    partial void OnIDNhapChanged();
    partial void OnIDNhanVienChanging(System.Nullable<int> value);
    partial void OnIDNhanVienChanged();
    partial void OnNgayNhapChanging(System.Nullable<System.DateTime> value);
    partial void OnNgayNhapChanged();
    partial void OnTongTienChanging(System.Nullable<double> value);
    partial void OnTongTienChanged();
    #endregion
		
		public NhapKho()
		{
			this._CTNhapKhos = new EntitySet<CTNhapKho>(new Action<CTNhapKho>(this.attach_CTNhapKhos), new Action<CTNhapKho>(this.detach_CTNhapKhos));
			this._NhanVien = default(EntityRef<NhanVien>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDNhap", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IDNhap
		{
			get
			{
				return this._IDNhap;
			}
			set
			{
				if ((this._IDNhap != value))
				{
					this.OnIDNhapChanging(value);
					this.SendPropertyChanging();
					this._IDNhap = value;
					this.SendPropertyChanged("IDNhap");
					this.OnIDNhapChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDNhanVien", DbType="Int")]
		public System.Nullable<int> IDNhanVien
		{
			get
			{
				return this._IDNhanVien;
			}
			set
			{
				if ((this._IDNhanVien != value))
				{
					if (this._NhanVien.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDNhanVienChanging(value);
					this.SendPropertyChanging();
					this._IDNhanVien = value;
					this.SendPropertyChanged("IDNhanVien");
					this.OnIDNhanVienChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NgayNhap", DbType="Date")]
		public System.Nullable<System.DateTime> NgayNhap
		{
			get
			{
				return this._NgayNhap;
			}
			set
			{
				if ((this._NgayNhap != value))
				{
					this.OnNgayNhapChanging(value);
					this.SendPropertyChanging();
					this._NgayNhap = value;
					this.SendPropertyChanged("NgayNhap");
					this.OnNgayNhapChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TongTien", DbType="Float")]
		public System.Nullable<double> TongTien
		{
			get
			{
				return this._TongTien;
			}
			set
			{
				if ((this._TongTien != value))
				{
					this.OnTongTienChanging(value);
					this.SendPropertyChanging();
					this._TongTien = value;
					this.SendPropertyChanged("TongTien");
					this.OnTongTienChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="NhapKho_CTNhapKho", Storage="_CTNhapKhos", ThisKey="IDNhap", OtherKey="IDNhap")]
		public EntitySet<CTNhapKho> CTNhapKhos
		{
			get
			{
				return this._CTNhapKhos;
			}
			set
			{
				this._CTNhapKhos.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="NhanVien_NhapKho", Storage="_NhanVien", ThisKey="IDNhanVien", OtherKey="IDNhanVien", IsForeignKey=true)]
		public NhanVien NhanVien
		{
			get
			{
				return this._NhanVien.Entity;
			}
			set
			{
				NhanVien previousValue = this._NhanVien.Entity;
				if (((previousValue != value) 
							|| (this._NhanVien.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._NhanVien.Entity = null;
						previousValue.NhapKhos.Remove(this);
					}
					this._NhanVien.Entity = value;
					if ((value != null))
					{
						value.NhapKhos.Add(this);
						this._IDNhanVien = value.IDNhanVien;
					}
					else
					{
						this._IDNhanVien = default(Nullable<int>);
					}
					this.SendPropertyChanged("NhanVien");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CTNhapKhos(CTNhapKho entity)
		{
			this.SendPropertyChanging();
			entity.NhapKho = this;
		}
		
		private void detach_CTNhapKhos(CTNhapKho entity)
		{
			this.SendPropertyChanging();
			entity.NhapKho = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Account")]
	public partial class Account : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _TenTaiKhoan;
		
		private string _MatKhau;
		
		private System.Nullable<int> _IDNhanVien;
		
		private EntityRef<NhanVien> _NhanVien;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTenTaiKhoanChanging(string value);
    partial void OnTenTaiKhoanChanged();
    partial void OnMatKhauChanging(string value);
    partial void OnMatKhauChanged();
    partial void OnIDNhanVienChanging(System.Nullable<int> value);
    partial void OnIDNhanVienChanged();
    #endregion
		
		public Account()
		{
			this._NhanVien = default(EntityRef<NhanVien>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TenTaiKhoan", DbType="VarChar(30) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string TenTaiKhoan
		{
			get
			{
				return this._TenTaiKhoan;
			}
			set
			{
				if ((this._TenTaiKhoan != value))
				{
					this.OnTenTaiKhoanChanging(value);
					this.SendPropertyChanging();
					this._TenTaiKhoan = value;
					this.SendPropertyChanged("TenTaiKhoan");
					this.OnTenTaiKhoanChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MatKhau", DbType="VarChar(30) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string MatKhau
		{
			get
			{
				return this._MatKhau;
			}
			set
			{
				if ((this._MatKhau != value))
				{
					this.OnMatKhauChanging(value);
					this.SendPropertyChanging();
					this._MatKhau = value;
					this.SendPropertyChanged("MatKhau");
					this.OnMatKhauChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDNhanVien", DbType="Int")]
		public System.Nullable<int> IDNhanVien
		{
			get
			{
				return this._IDNhanVien;
			}
			set
			{
				if ((this._IDNhanVien != value))
				{
					if (this._NhanVien.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDNhanVienChanging(value);
					this.SendPropertyChanging();
					this._IDNhanVien = value;
					this.SendPropertyChanged("IDNhanVien");
					this.OnIDNhanVienChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="NhanVien_Account", Storage="_NhanVien", ThisKey="IDNhanVien", OtherKey="IDNhanVien", IsForeignKey=true)]
		public NhanVien NhanVien
		{
			get
			{
				return this._NhanVien.Entity;
			}
			set
			{
				NhanVien previousValue = this._NhanVien.Entity;
				if (((previousValue != value) 
							|| (this._NhanVien.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._NhanVien.Entity = null;
						previousValue.Accounts.Remove(this);
					}
					this._NhanVien.Entity = value;
					if ((value != null))
					{
						value.Accounts.Add(this);
						this._IDNhanVien = value.IDNhanVien;
					}
					else
					{
						this._IDNhanVien = default(Nullable<int>);
					}
					this.SendPropertyChanged("NhanVien");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.NhanVien")]
	public partial class NhanVien : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IDNhanVien;
		
		private System.Nullable<int> _IDLoaiNV;
		
		private string _TenNV;
		
		private string _DiaChi;
		
		private string _SDT;
		
		private string _GhiChu;
		
		private EntitySet<Bill> _Bills;
		
		private EntitySet<ChamCong> _ChamCongs;
		
		private EntitySet<DatBan> _DatBans;
		
		private EntitySet<NhapKho> _NhapKhos;
		
		private EntitySet<Account> _Accounts;
		
		private EntityRef<LoaiNV> _LoaiNV;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDNhanVienChanging(int value);
    partial void OnIDNhanVienChanged();
    partial void OnIDLoaiNVChanging(System.Nullable<int> value);
    partial void OnIDLoaiNVChanged();
    partial void OnTenNVChanging(string value);
    partial void OnTenNVChanged();
    partial void OnDiaChiChanging(string value);
    partial void OnDiaChiChanged();
    partial void OnSDTChanging(string value);
    partial void OnSDTChanged();
    partial void OnGhiChuChanging(string value);
    partial void OnGhiChuChanged();
    #endregion
		
		public NhanVien()
		{
			this._Bills = new EntitySet<Bill>(new Action<Bill>(this.attach_Bills), new Action<Bill>(this.detach_Bills));
			this._ChamCongs = new EntitySet<ChamCong>(new Action<ChamCong>(this.attach_ChamCongs), new Action<ChamCong>(this.detach_ChamCongs));
			this._DatBans = new EntitySet<DatBan>(new Action<DatBan>(this.attach_DatBans), new Action<DatBan>(this.detach_DatBans));
			this._NhapKhos = new EntitySet<NhapKho>(new Action<NhapKho>(this.attach_NhapKhos), new Action<NhapKho>(this.detach_NhapKhos));
			this._Accounts = new EntitySet<Account>(new Action<Account>(this.attach_Accounts), new Action<Account>(this.detach_Accounts));
			this._LoaiNV = default(EntityRef<LoaiNV>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDNhanVien", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IDNhanVien
		{
			get
			{
				return this._IDNhanVien;
			}
			set
			{
				if ((this._IDNhanVien != value))
				{
					this.OnIDNhanVienChanging(value);
					this.SendPropertyChanging();
					this._IDNhanVien = value;
					this.SendPropertyChanged("IDNhanVien");
					this.OnIDNhanVienChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDLoaiNV", DbType="Int")]
		public System.Nullable<int> IDLoaiNV
		{
			get
			{
				return this._IDLoaiNV;
			}
			set
			{
				if ((this._IDLoaiNV != value))
				{
					if (this._LoaiNV.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDLoaiNVChanging(value);
					this.SendPropertyChanging();
					this._IDLoaiNV = value;
					this.SendPropertyChanged("IDLoaiNV");
					this.OnIDLoaiNVChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TenNV", DbType="NVarChar(30)")]
		public string TenNV
		{
			get
			{
				return this._TenNV;
			}
			set
			{
				if ((this._TenNV != value))
				{
					this.OnTenNVChanging(value);
					this.SendPropertyChanging();
					this._TenNV = value;
					this.SendPropertyChanged("TenNV");
					this.OnTenNVChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DiaChi", DbType="NVarChar(50)")]
		public string DiaChi
		{
			get
			{
				return this._DiaChi;
			}
			set
			{
				if ((this._DiaChi != value))
				{
					this.OnDiaChiChanging(value);
					this.SendPropertyChanging();
					this._DiaChi = value;
					this.SendPropertyChanged("DiaChi");
					this.OnDiaChiChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SDT", DbType="NVarChar(12)")]
		public string SDT
		{
			get
			{
				return this._SDT;
			}
			set
			{
				if ((this._SDT != value))
				{
					this.OnSDTChanging(value);
					this.SendPropertyChanging();
					this._SDT = value;
					this.SendPropertyChanged("SDT");
					this.OnSDTChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GhiChu", DbType="NVarChar(50)")]
		public string GhiChu
		{
			get
			{
				return this._GhiChu;
			}
			set
			{
				if ((this._GhiChu != value))
				{
					this.OnGhiChuChanging(value);
					this.SendPropertyChanging();
					this._GhiChu = value;
					this.SendPropertyChanged("GhiChu");
					this.OnGhiChuChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="NhanVien_Bill", Storage="_Bills", ThisKey="IDNhanVien", OtherKey="IDNhanVien")]
		public EntitySet<Bill> Bills
		{
			get
			{
				return this._Bills;
			}
			set
			{
				this._Bills.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="NhanVien_ChamCong", Storage="_ChamCongs", ThisKey="IDNhanVien", OtherKey="IDNhanVien")]
		public EntitySet<ChamCong> ChamCongs
		{
			get
			{
				return this._ChamCongs;
			}
			set
			{
				this._ChamCongs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="NhanVien_DatBan", Storage="_DatBans", ThisKey="IDNhanVien", OtherKey="IDNhanVien")]
		public EntitySet<DatBan> DatBans
		{
			get
			{
				return this._DatBans;
			}
			set
			{
				this._DatBans.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="NhanVien_NhapKho", Storage="_NhapKhos", ThisKey="IDNhanVien", OtherKey="IDNhanVien")]
		public EntitySet<NhapKho> NhapKhos
		{
			get
			{
				return this._NhapKhos;
			}
			set
			{
				this._NhapKhos.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="NhanVien_Account", Storage="_Accounts", ThisKey="IDNhanVien", OtherKey="IDNhanVien")]
		public EntitySet<Account> Accounts
		{
			get
			{
				return this._Accounts;
			}
			set
			{
				this._Accounts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LoaiNV_NhanVien", Storage="_LoaiNV", ThisKey="IDLoaiNV", OtherKey="IDLoaiNV", IsForeignKey=true)]
		public LoaiNV LoaiNV
		{
			get
			{
				return this._LoaiNV.Entity;
			}
			set
			{
				LoaiNV previousValue = this._LoaiNV.Entity;
				if (((previousValue != value) 
							|| (this._LoaiNV.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LoaiNV.Entity = null;
						previousValue.NhanViens.Remove(this);
					}
					this._LoaiNV.Entity = value;
					if ((value != null))
					{
						value.NhanViens.Add(this);
						this._IDLoaiNV = value.IDLoaiNV;
					}
					else
					{
						this._IDLoaiNV = default(Nullable<int>);
					}
					this.SendPropertyChanged("LoaiNV");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Bills(Bill entity)
		{
			this.SendPropertyChanging();
			entity.NhanVien = this;
		}
		
		private void detach_Bills(Bill entity)
		{
			this.SendPropertyChanging();
			entity.NhanVien = null;
		}
		
		private void attach_ChamCongs(ChamCong entity)
		{
			this.SendPropertyChanging();
			entity.NhanVien = this;
		}
		
		private void detach_ChamCongs(ChamCong entity)
		{
			this.SendPropertyChanging();
			entity.NhanVien = null;
		}
		
		private void attach_DatBans(DatBan entity)
		{
			this.SendPropertyChanging();
			entity.NhanVien = this;
		}
		
		private void detach_DatBans(DatBan entity)
		{
			this.SendPropertyChanging();
			entity.NhanVien = null;
		}
		
		private void attach_NhapKhos(NhapKho entity)
		{
			this.SendPropertyChanging();
			entity.NhanVien = this;
		}
		
		private void detach_NhapKhos(NhapKho entity)
		{
			this.SendPropertyChanging();
			entity.NhanVien = null;
		}
		
		private void attach_Accounts(Account entity)
		{
			this.SendPropertyChanging();
			entity.NhanVien = this;
		}
		
		private void detach_Accounts(Account entity)
		{
			this.SendPropertyChanging();
			entity.NhanVien = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CaLam")]
	public partial class CaLam : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IDCa;
		
		private string _TenCa;
		
		private System.Nullable<System.TimeSpan> _GioBDCa;
		
		private System.Nullable<System.TimeSpan> _GioHetCa;
		
		private System.Nullable<int> _TienCong;
		
		private EntitySet<BangLuong> _BangLuongs;
		
		private EntitySet<ChamCong> _ChamCongs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDCaChanging(int value);
    partial void OnIDCaChanged();
    partial void OnTenCaChanging(string value);
    partial void OnTenCaChanged();
    partial void OnGioBDCaChanging(System.Nullable<System.TimeSpan> value);
    partial void OnGioBDCaChanged();
    partial void OnGioHetCaChanging(System.Nullable<System.TimeSpan> value);
    partial void OnGioHetCaChanged();
    partial void OnTienCongChanging(System.Nullable<int> value);
    partial void OnTienCongChanged();
    #endregion
		
		public CaLam()
		{
			this._BangLuongs = new EntitySet<BangLuong>(new Action<BangLuong>(this.attach_BangLuongs), new Action<BangLuong>(this.detach_BangLuongs));
			this._ChamCongs = new EntitySet<ChamCong>(new Action<ChamCong>(this.attach_ChamCongs), new Action<ChamCong>(this.detach_ChamCongs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDCa", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IDCa
		{
			get
			{
				return this._IDCa;
			}
			set
			{
				if ((this._IDCa != value))
				{
					this.OnIDCaChanging(value);
					this.SendPropertyChanging();
					this._IDCa = value;
					this.SendPropertyChanged("IDCa");
					this.OnIDCaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TenCa", DbType="NVarChar(20)")]
		public string TenCa
		{
			get
			{
				return this._TenCa;
			}
			set
			{
				if ((this._TenCa != value))
				{
					this.OnTenCaChanging(value);
					this.SendPropertyChanging();
					this._TenCa = value;
					this.SendPropertyChanged("TenCa");
					this.OnTenCaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GioBDCa", DbType="Time")]
		public System.Nullable<System.TimeSpan> GioBDCa
		{
			get
			{
				return this._GioBDCa;
			}
			set
			{
				if ((this._GioBDCa != value))
				{
					this.OnGioBDCaChanging(value);
					this.SendPropertyChanging();
					this._GioBDCa = value;
					this.SendPropertyChanged("GioBDCa");
					this.OnGioBDCaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GioHetCa", DbType="Time")]
		public System.Nullable<System.TimeSpan> GioHetCa
		{
			get
			{
				return this._GioHetCa;
			}
			set
			{
				if ((this._GioHetCa != value))
				{
					this.OnGioHetCaChanging(value);
					this.SendPropertyChanging();
					this._GioHetCa = value;
					this.SendPropertyChanged("GioHetCa");
					this.OnGioHetCaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TienCong", DbType="Int")]
		public System.Nullable<int> TienCong
		{
			get
			{
				return this._TienCong;
			}
			set
			{
				if ((this._TienCong != value))
				{
					this.OnTienCongChanging(value);
					this.SendPropertyChanging();
					this._TienCong = value;
					this.SendPropertyChanged("TienCong");
					this.OnTienCongChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CaLam_BangLuong", Storage="_BangLuongs", ThisKey="IDCa", OtherKey="IDCa")]
		public EntitySet<BangLuong> BangLuongs
		{
			get
			{
				return this._BangLuongs;
			}
			set
			{
				this._BangLuongs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CaLam_ChamCong", Storage="_ChamCongs", ThisKey="IDCa", OtherKey="IDCa")]
		public EntitySet<ChamCong> ChamCongs
		{
			get
			{
				return this._ChamCongs;
			}
			set
			{
				this._ChamCongs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BangLuongs(BangLuong entity)
		{
			this.SendPropertyChanging();
			entity.CaLam = this;
		}
		
		private void detach_BangLuongs(BangLuong entity)
		{
			this.SendPropertyChanging();
			entity.CaLam = null;
		}
		
		private void attach_ChamCongs(ChamCong entity)
		{
			this.SendPropertyChanging();
			entity.CaLam = this;
		}
		
		private void detach_ChamCongs(ChamCong entity)
		{
			this.SendPropertyChanging();
			entity.CaLam = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LoaiNV")]
	public partial class LoaiNV : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IDLoaiNV;
		
		private string _TenLoaiNV;
		
		private System.Nullable<int> _HeSo;
		
		private EntitySet<BangLuong> _BangLuongs;
		
		private EntitySet<NhanVien> _NhanViens;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDLoaiNVChanging(int value);
    partial void OnIDLoaiNVChanged();
    partial void OnTenLoaiNVChanging(string value);
    partial void OnTenLoaiNVChanged();
    partial void OnHeSoChanging(System.Nullable<int> value);
    partial void OnHeSoChanged();
    #endregion
		
		public LoaiNV()
		{
			this._BangLuongs = new EntitySet<BangLuong>(new Action<BangLuong>(this.attach_BangLuongs), new Action<BangLuong>(this.detach_BangLuongs));
			this._NhanViens = new EntitySet<NhanVien>(new Action<NhanVien>(this.attach_NhanViens), new Action<NhanVien>(this.detach_NhanViens));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDLoaiNV", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IDLoaiNV
		{
			get
			{
				return this._IDLoaiNV;
			}
			set
			{
				if ((this._IDLoaiNV != value))
				{
					this.OnIDLoaiNVChanging(value);
					this.SendPropertyChanging();
					this._IDLoaiNV = value;
					this.SendPropertyChanged("IDLoaiNV");
					this.OnIDLoaiNVChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TenLoaiNV", DbType="NVarChar(30)")]
		public string TenLoaiNV
		{
			get
			{
				return this._TenLoaiNV;
			}
			set
			{
				if ((this._TenLoaiNV != value))
				{
					this.OnTenLoaiNVChanging(value);
					this.SendPropertyChanging();
					this._TenLoaiNV = value;
					this.SendPropertyChanged("TenLoaiNV");
					this.OnTenLoaiNVChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HeSo", DbType="Int")]
		public System.Nullable<int> HeSo
		{
			get
			{
				return this._HeSo;
			}
			set
			{
				if ((this._HeSo != value))
				{
					this.OnHeSoChanging(value);
					this.SendPropertyChanging();
					this._HeSo = value;
					this.SendPropertyChanged("HeSo");
					this.OnHeSoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LoaiNV_BangLuong", Storage="_BangLuongs", ThisKey="IDLoaiNV", OtherKey="IDLoaiNV")]
		public EntitySet<BangLuong> BangLuongs
		{
			get
			{
				return this._BangLuongs;
			}
			set
			{
				this._BangLuongs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LoaiNV_NhanVien", Storage="_NhanViens", ThisKey="IDLoaiNV", OtherKey="IDLoaiNV")]
		public EntitySet<NhanVien> NhanViens
		{
			get
			{
				return this._NhanViens;
			}
			set
			{
				this._NhanViens.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BangLuongs(BangLuong entity)
		{
			this.SendPropertyChanging();
			entity.LoaiNV = this;
		}
		
		private void detach_BangLuongs(BangLuong entity)
		{
			this.SendPropertyChanging();
			entity.LoaiNV = null;
		}
		
		private void attach_NhanViens(NhanVien entity)
		{
			this.SendPropertyChanging();
			entity.LoaiNV = this;
		}
		
		private void detach_NhanViens(NhanVien entity)
		{
			this.SendPropertyChanging();
			entity.LoaiNV = null;
		}
	}
}
#pragma warning restore 1591
